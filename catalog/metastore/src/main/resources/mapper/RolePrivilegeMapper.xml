<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "<http://mybatis.org/dtd/mybatis-3-mapper.dtd>">
<mapper namespace="io.polycat.catalog.store.mapper.RolePrivilegeMapper">
    <update id="createRolePrivilegeSubspace">
        DROP TABLE IF EXISTS schema_${projectId}.role_privilege;
        CREATE TABLE schema_${projectId}.role_privilege
        (
        role_id VARCHAR(64) NOT NULL,
        object_type VARCHAR(64) NOT NULL,
        object_id VARCHAR(765) NOT NULL,
        privilege BIGINT NOT NULL,
        catalog_id VARCHAR(64) DEFAULT NULL,
        database_id VARCHAR(64) DEFAULT NULL,
        CONSTRAINT role_privilege_key PRIMARY KEY(role_id, object_type, object_id)
        );

    </update>
    <insert id="insertRolePrivilege">
        INSERT INTO schema_${projectId}.role_privilege (role_id, object_type, object_id, privilege, catalog_id, database_id)
        VALUES (#{data.roleId}, #{data.objectType}, #{data.objectId}, #{data.privilege}, #{data.catalogId}, #{data.databaseId})
    </insert>

    <select id="getRolePrivilege" resultType="io.polycat.catalog.store.gaussdb.pojo.RolePrivilegeRecord">
        SELECT * FROM schema_${projectId}.role_privilege WHERE object_id = #{objectId} AND role_id = #{roleId} AND
        object_type = #{objectType}
    </select>

    <select id="getRolePrivileges" resultType="io.polycat.catalog.store.gaussdb.pojo.RolePrivilegeRecord">
        SELECT * FROM schema_${projectId}.role_privilege WHERE role_id = #{roleId}
    </select>

    <select id="getRolePrivilegesByFilter" resultType="io.polycat.catalog.store.gaussdb.pojo.RolePrivilegeRecord">
        SELECT * FROM schema_${projectId}.role_privilege
        WHERE ${filter}
        ORDER BY object_type, object_id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getRoleInfoByFilter"
            resultType="io.polycat.catalog.store.gaussdb.pojo.RoleObjectRecord">
        WITH t_rp AS (
            SELECT t1.role_id, t1.name role_name, t1.comment  FROM (
                SELECT * FROM schema_${projectId}.role_properties WHERE ${roleNameFilter}
            ) t1 JOIN (
                SELECT role_id FROM schema_${projectId}.role_user WHERE ${roleUserFilter} GROUP BY role_id
            ) t2 ON t1.role_id = t2.role_id JOIN (
                SELECT role_id FROM schema_${projectId}.role_privilege WHERE ${rolePrivilegeFilter} GROUP BY role_id
            ) t3 ON t1.role_id = t3.role_id
        )
        SELECT role_id, role_name, comment, string_agg(DISTINCT user_id, ',') AS users FROM (
            SELECT t1.*, t2.user_id AS user_id FROM t_rp AS t1
            LEFT JOIN schema_${projectId}.role_user AS t2
            ON t1.role_id = t2.role_id
        ) tmp GROUP BY role_id, role_name, comment
    </select>

    <select id="getPrivilegeRolesByFilter" resultType="io.polycat.catalog.common.model.PrivilegeRolesObject">
        SELECT object_type, object_id, string_agg(DISTINCT role_id, ',') roles  FROM schema_${projectId}.role_privilege
        WHERE ${filter}
            GROUP BY object_type, object_id
            ORDER BY object_type, object_id
            LIMIT #{limit} OFFSET #{offset}
    </select>
</mapper>