<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "<http://mybatis.org/dtd/mybatis-3-mapper.dtd>">
<mapper namespace="io.polycat.catalog.store.mapper.RoleUserMapper">
    <update id="createRoleUserSubspace">
        DROP TABLE IF EXISTS schema_${projectId}.role_user;
        CREATE TABLE schema_${projectId}.role_user
        (
        role_id VARCHAR(64) NOT NULL,
        user_id VARCHAR(128) NOT NULL,
        CONSTRAINT role_user_key PRIMARY KEY(role_id, user_id)
        );
    </update>

    <insert id="insertRoleUser">
        INSERT INTO schema_${projectId}.role_user (role_id, user_id)
        VALUES (#{roleId}, #{userId})
        ON CONFLICT ON CONSTRAINT role_user_key DO NOTHING
    </insert>

    <select id="getRoleUsersByRoleId" resultType="io.polycat.catalog.store.gaussdb.pojo.RoleUserRecord">
        SELECT * FROM schema_${projectId}.role_user WHERE role_id = #{roleId}
    </select>

    <select id="getRoleUsersByUserId" resultType="io.polycat.catalog.store.gaussdb.pojo.RoleUserRecord">
        SELECT * FROM schema_${projectId}.role_user WHERE user_id = #{userId}
    </select>

    <select id="getRoleIds" resultType="java.lang.String">
        SELECT role_id FROM schema_${projectId}.role_user WHERE ${filter} GROUP BY role_id
    </select>

</mapper>